# Issuer's public key (must be a SECP256K1 key)
issuing_address=02033d06a3e1f9b96cf353f4086620b6e0529035eb1f02805cb67e8831c372488d4f
# Target public key for the transfer transaction (unlike Bitcoin and Ethereum, a transfer can't be made to a dead address). This should be a public key you own so you still control any CSPR sent.
target_address=0202a6e2d25621758e2c92900f842ff367bbb5e4b6a849cacb43c3eaebf371b24b85

chain = casper_testnet

# Important: for security reasons, normally you should use a USB, which needs to be inserted and removed during the standard certficate issuing process.
# For testing purposes, to use the data folder in this directory, use this setting: usb_name=data
usb_name=data
# Issuer's private key file (relative to usb_name path). You can get this file from your CasperLabs Signer.
key_file=cert1_secret_key.pem

# Put your unsigned certificates here for signing. Defaults to <project-base>/data/unsigned_certificates
# unsigned_certificates_dir=<path-to-your-unsigned-certificates>
# Final blockchain certificates output. Defaults to <project-base>/data/unsigned_certificates
# blockchain_certificates_dir=<path-to-your-blockchain-certificates>
# Where to store intermediate files, for debugging and checkpointing. Defaults to <project-base>/work
# work_dir=<path-to-your-workdir>
work_dir=data/work

# This skips checking whether the WiFi is on while accessing the private key. Used for testing.
no_safe_mode

# Choose one of the following when using a Casper RPC node for issuing (you can comment the other out)
# casper_rpc_ip_address=<casper-mainnet-rpc-node-ip-address>
caspertest_rpc_ip_address=138.201.54.44
